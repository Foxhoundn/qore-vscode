{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Qore",
	"patterns": [
		{ "include": "#comments" },
		{ "include": "#keywords" },
		{ "include": "#strings" },
		{ "include": "#constants" },
		{ "include": "#storage_types" },
		{ "include": "#storage_modifiers" }
	],
	"repository": {
		"comments": {
			"patterns": [
				{
					"comment": "Single-line comment",
					"name": "comment.line.number-sign.qore",
					"begin": "#",
					"end": "$"
				},
				{
					"comment": "Block comment",
					"begin": "/\\*",
					"end": "\\*/",
					"captures": {
						"0": {
							"name": "punctuation.definition.comment.qore"
						}
					},
					"name": "comment.block.qore"
				}
			]
		},
		"keywords": {
			"patterns": [
				{
					"match": "\\b(break|case|continue|default|do|else|for|if|return|switch|thread_exit|while)\\b",
					"name": "keyword.control.qore"
				},
				{
					"match": "\\b(try|catch|throw|rethrow)\\b",
					"name": "keyword.control.exception.qore"
				},
				{
					"match": "\\b(on_exit|on_error|on_success)\\b",
					"name": "keyword.control.oncondition.qore"
				},
				{
					"match": "\\b(context|subcontext|summarize)\\b",
					"name": "keyword.control.special.qore"
				},
				{
					"match": "\\?|:",
					"name": "keyword.control.ternary.qore"
				},
				{
					"match": "\\b(background|chomp|elements|exists|extract|foldl|foldr|instanceof|keys|map|pop|push|remove|select|splice|shift|trim|unshift)\\b",
					"name": "keyword.operator.qore"
				},
				{
					"match": "(<<|>>>?|\\^)",
					"name": "keyword.operator.bitwise.qore"
				},
				{
					"match": "((&|\\^|\\||<<|>>)=)",
					"name": "keyword.operator.assignment.bitwise.qore"
				},
				{
					"match": "(===?|!==?|<=|>=|<=>|<|>)",
					"name": "keyword.operator.comparison.qore"
				},
				{
					"match": "([+*/%-]=)",
					"name": "keyword.operator.assignment.arithmetic.qore"
				},
				{
					"match": "(=)",
					"name": "keyword.operator.assignment.qore"
				},
				{
					"match": "(\\-\\-|\\+\\+)",
					"name": "keyword.operator.increment-decrement.qore"
				},
				{
					"match": "(\\-|\\+|\\*|\\/|%)",
					"name": "keyword.operator.arithmetic.qore"
				},
				{
					"match": "(!|&&|\\|\\|)",
					"name": "keyword.operator.logical.qore"
				},
				{
					"match": "(\\||&)",
					"name": "keyword.operator.bitwise.qore"
				},
				{
					"match": ";",
					"name": "punctuation.terminator.qore"
				},
				{
					"match": "\\bnew\\b",
					"name": "keyword.operator.new.qore"
				},
				{
					"match": "\\bdelete\\b",
					"name": "keyword.operator.delete.qore"
				},
				{
					"match": "\\bcast\\b",
					"name": "keyword.operator.cast.qore"
				}
			]
		},
		"constants": {
			"patterns": [
				{
					"match": "\\bTrue\\b",
					"name": "constant.language.boolean.true.qore"
				},
				{
					"match": "\\bFalse\\b",
					"name": "constant.language.boolean.false.qore"
				},
				{
					"match": "\\bNOTHING\\b",
					"name": "constant.language.nothing.qore"
				},
				{
					"match": "\\bNULL\\b",
					"name": "constant.language.null.qore"
				}
			]
		},
		"storage_types": {
			"patterns": [
				{
					"match": "\\b(binary|bool|date|float|hash|int|list|number|string)\\b",
					"name": "storage.type.primitive.qore"
				},
				{
					"match": "\\b(softbool|softdate|softfloat|softhash|softint|softlist|softnumber|softstring)\\b",
					"name": "storage.type.primitive.soft.qore"
				},
				{
					"match": "\\bany\\b",
					"name": "storage.type.any.qore"
				},
				{
					"match": "\\b(callref|closure|code)\\b",
					"name": "storage.type.closure.qore"
				},
				{
					"match": "\\bdata\\b",
					"name": "storage.type.data.qore"
				},
				{
					"match": "\\bnothing\\b",
					"name": "storage.type.nothing.qore"
				},
				{
					"match": "\\bnull\\b",
					"name": "storage.type.null.qore"
				},
				{
					"match": "\\bobject\\b",
					"name": "storage.type.object.qore"
				},
				{
					"match": "\\breference\\b",
					"name": "storage.type.reference.qore"
				},
				{
					"match": "\\btimeout\\b",
					"name": "storage.type.timeout.qore"
				}
			]
		},
		"storage_modifiers": {
			"patterns": [
				{
					"match": "\\b(deprecated|final|public)\\b",
					"name": "storage.modifier.class.qore"
				},
				{
					"match": "\\b(abstract|deprecated|final|internal|public|private|static|synchronized)\\b",
					"name": "storage.modifier.function.qore"
				},
				{
					"match": "\\b(const|deprecated|final|internal|my|our|public|private|static)\\b",
					"name": "storage.modifier.variable.qore"
				}
			]
		},
		"strings": {
			"name": "string.quoted.double.qore",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"match": "\\\\([0-7]{3}|[0-7]{2}|[0-7]|[\"\\\\bfnrtv])",
					"name": "constant.character.escape.qore"
				},
				{
					"match": "(%[aAdfFgGnNsxXy])",
					"name": "constant.character.format.qore"
				},
				{
					"match": "(&amp;|&lt;|&gt;)",
					"name": "constant.character.special.qore"
				}
			]
		}
	},
	"scopeName": "source.qore"
}