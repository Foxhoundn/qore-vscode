{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "name": "Qore",
    "patterns": [
        { "include": "#implicit_args" },
        { "include": "#comments" },
        { "include": "#parse_options" },
        { "include": "#regexps" },
        { "include": "#binary" },
        { "include": "#keywords" },
        { "include": "#operators" },
        { "include": "#strings" },
        { "include": "#strings2" },
        { "include": "#dates" },
        { "include": "#numbers" },
        { "include": "#constants" },
        { "include": "#storage_types" },
        { "include": "#storage_modifiers" },
        { "include": "#builtins" }
    ],
    "repository": {
        "binary": {
            "patterns": [
                {
                    "match": "<([0-9A-Fa-f][0-9A-Fa-f])+>",
                    "name": "constant.numeric.binary.qore"
                }
            ]
        },
        "builtins": {
            "patterns": [
                {
                    "match": "\\b(Platform|PlatformOS|PlatformCPU)\\b",
                    "name": "support.variable.platform.qore"
                },
                {
                    "match": "\\b(Build|BuildHost|Compiler|CFLAGS|LDFLAGS|MACHINE_MSB)\\b",
                    "name": "support.variable.build.qore"
                },
                {
                    "match": "\\b(VersionString|VersionMajor|VersionMinor|VersionSub)\\b",
                    "name": "support.variable.version.qore"
                },
                {
                    "match": "\\b(stdin|stdout|stderr|stdin_stream|stdout_stream|stderr_stream)\\b",
                    "name": "support.variable.stdio.qore"
                },
                {
                    "match": "\\b(PathSep|DirSep)\\b",
                    "name": "support.variable.separators.qore"
                }
            ]
        },
        "comments": {
            "patterns": [
                {
                    "comment": "Single-line comment",
                    "name": "comment.line.number-sign.qore",
                    "begin": "#",
                    "end": "$",
                    "patterns": [
                        {
                            "include": "#comment_tags"
                        },
                        {
                            "include": "#doc_tags"
                        }
                    ]
                },
                {
                    "comment": "Block comment",
                    "begin": "/\\*",
                    "end": "\\*/",
                    "captures": {
                        "0": {
                            "name": "punctuation.definition.comment.qore"
                        }
                    },
                    "name": "comment.block.qore",
                    "patterns": [
                        {
                            "include": "#comment_tags"
                        },
                        {
                            "include": "#doc_tags"
                        }
                    ]
                }
            ]
        },
        "comment_tags": {
            "patterns": [
                {
                    "match": "(\\b(BUG|FIXME|HACK|NOTE|TODO|XXX)\\b)",
                    "name": "constant.other.commenttag.qore"
                }
            ]
        },
        "constants": {
            "patterns": [
                {
                    "match": "\\bTrue\\b",
                    "name": "constant.language.boolean.true.qore"
                },
                {
                    "match": "\\bFalse\\b",
                    "name": "constant.language.boolean.false.qore"
                },
                {
                    "match": "\\bNOTHING\\b",
                    "name": "constant.language.nothing.qore"
                },
                {
                    "match": "\\bNULL\\b",
                    "name": "constant.language.null.qore"
                },
                {
                    "match": "\\b(NT_(BINARY|BOOLEAN|CALLREF|CLOSURE|DATE|FLOAT|INT|HASH|LIST|NOTHING|NULL|NUMBER|OBJECT|STRING))\\b",
                    "name": "constant.language.types.qore"
                }
            ]
        },
        "dates": {
            "patterns": [
                {
                    "comment": "ISO-8601 absolute date (with T)",
                    "match": "\\b([0-9]{4})-((0[1-9])|(1[0-2]))-((0[1-9])|([12][0-9])|(3[01]))(T(([01][0-9])|(2[0-3]))(:[0-5][0-9])(:[0-5][0-9](\\.[0-9]{1,6})?)?)(Z|([+-][01][0-9](:[0-5][0-9](:[0-5][0-9])?)?))?\\b",
                    "name": "constant.other.date.isot.qore"
                },
                {
                    "comment": "ISO-8601 absolute date (with dash)",
                    "match": "\\b([0-9]{4})-((0[1-9])|(1[0-2]))-((0[1-9])|([12][0-9])|(3[01]))(-(([01][0-9])|(2[0-3]))(:[0-5][0-9])(:[0-5][0-9])(\\.[0-9]{1,6})?)(Z|([+-][01][0-9](:[0-5][0-9](:[0-5][0-9])?)?))?\\b",
                    "name": "constant.other.date.isodash.qore"
                },
                {
                    "comment": "ISO-8601 absolute date (only YMD+TZ)",
                    "match": "\\b([0-9]{4})-((0[1-9])|(1[0-2]))-((0[1-9])|([12][0-9])|(3[01]))(Z|([+-][01][0-9](:[0-5][0-9](:[0-5][0-9])?)?))?\\b",
                    "name": "constant.other.date.isoymdtz.qore"
                },
                {
                    "comment": "Just h+m+s+tz",
                    "match": "\\b(([01][0-9])|(2[0-3]))(:[0-5][0-9])(:[0-5][0-9](\\.[0-9]{1,6})?)?(Z|([+-][01][0-9](:[0-5][0-9](:[0-5][0-9])?)?))?\\b",
                    "name": "constant.other.date.hmstz.qore"
                },
                {
                    "comment": "Single Relative Time Format",
                    "match": "\\b[0-9]+(D|M|Y|h|m|ms|s|us)\\b",
                    "name": "constant.other.date.singlertf.qore"
                },
                {
                    "comment": "Short Relative Time Format (full)",
                    "match": "\\bP(-?[0-9]+[YMD])+T(-?[0-9]+[HMSu])+\\b",
                    "name": "constant.other.date.shortrtf.qore"
                },
                {
                    "comment": "Short Relative Time Format (only YMDHSu parts)",
                    "match": "\\bP(-?[0-9]+[YMDHSu])+\\b",
                    "name": "constant.other.date.shortrtf.qore"
                },
                {
                    "comment": "Short Relative Time Format (only THMSu parts)",
                    "match": "\\bPT(-?[0-9]+[HMSu])+\\b",
                    "name": "constant.other.date.shortrtf.qore"
                },
                {
                    "comment": "Long Relative Time Format (full)",
                    "match": "\\bP[0-9]{4}-[0-9]{2}-[0-9]{2}(T[0-9]{2}:[0-9]{2}(:[0-9]{2}(\\.[0-9]{1,6})?)?)?\\b",
                    "name": "constant.other.date.lrtf.qore"
                },
                {
                    "comment": "Long Relative Time Format (only h+m+s parts)",
                    "match": "\\bP(T)?[0-9]{2}:[0-9]{2}(:[0-9]{2}(\\.[0-9]{1,6})?)?\\b",
                    "name": "constant.other.date.lrtf.qore"
                }
            ]
        },
        "doc_tags": {
            "patterns": [
                {
                    "match": "(?:\\@|\\\\)(?:code)(\\{[^{}]*\\})?",
                    "name": "constant.other.docs.tag.qore",
                    "captures":{
                        "1": {
                            "name": "string.other.docs.code.qore"
                        }
                    }
                },
                {
                    "match": "(?:\\@|\\\\)(?:anchor)(?:\\s+(\\S*))?",
                    "name": "constant.other.docs.tag.qore",
                    "captures":{
                        "1": {
                            "name": "entity.other.docs.anchor.qore"
                        }
                    }
                },
                {
                    "match": "(?:\\@|\\\\)(?:c)(?:\\s+((?:\"(?:[^\"]*)\"(?=(?:\\s|\\W)))|(?:(?:\\w|-|_)*)))?",
                    "name": "constant.other.docs.tag.qore",
                    "captures":{
                        "1": {
                            "name": "entity.other.docs.c.qore"
                        }
                    }
                },
                {
                    "match": "(?:\\@|\\\\)(?:param)(?:\\s+(\\S*))?",
                    "name": "constant.other.docs.tag.qore",
                    "captures":{
                        "1": {
                            "name": "entity.other.docs.param.qore"
                        }
                    }
                },
                {
                    "match": "(?:\\@|\\\\)(?:throw(?:s)?|exception)(?:\\s+(\\S*))?",
                    "name": "constant.other.docs.tag.qore",
                    "captures":{
                        "1": {
                            "name": "entity.other.docs.exception.qore"
                        }
                    }
                },
                {
                    "match": "(?:\\@|\\\\)(?:mainpage)(.*)$",
                    "name": "constant.other.docs.tag.qore",
                    "captures":{
                        "1": {
                            "name": "markup.heading.mainpage.title.qore"
                        }
                    }
                },
                {
                    "match": "(?:\\@|\\\\)(?:par)(.*)$",
                    "name": "constant.other.docs.tag.qore",
                    "captures":{
                        "1": {
                            "name": "markup.heading.par.title.qore"
                        }
                    }
                },
                {
                    "match": "(?:\\@|\\\\)(?:defgroup)(?:\\s+(\\S*))?(?:\\s+(.*))?$",
                    "name": "constant.other.docs.tag.qore",
                    "captures":{
                        "1": {
                            "name": "entity.other.docs.defgroup.tag.qore"
                        },
                        "2": {
                            "name": "markup.heading.defgroup.name.qore"
                        }
                    }
                },
                {
                    "match": "(?:\\@|\\\\)(?:page)(?:\\s+(\\S*))?(?:\\s+(.*))?$",
                    "name": "constant.other.docs.tag.qore",
                    "captures":{
                        "1": {
                            "name": "entity.other.docs.page.tag.qore"
                        },
                        "2": {
                            "name": "markup.heading.page.name.qore"
                        }
                    }
                },
                {
                    "match": "(?:\\@|\\\\)(?:(?:sub)*section)(?:\\s+(\\S*))?(?:\\s+(.*))?$",
                    "name": "constant.other.docs.tag.qore",
                    "captures":{
                        "1": {
                            "name": "entity.other.docs.section.tag.qore"
                        },
                        "2": {
                            "name": "markup.heading.section.name.qore"
                        }
                    }
                },
                {
                    "match": "(?:\\@|\\\\)(?:ref)(?:\\s+(\\S*))?(?:\\s+(\"(?:(?:\\\\\")|[^\"])*\"))?",
                    "name": "constant.other.docs.tag.qore",
                    "captures":{
                        "1": {
                            "name": "entity.other.docs.ref.qore"
                        },
                        "2": {
                            "name": "string.other.docs.ref.qore"
                        }
                    }
                },
                {
                    "match": "(?:\\@|\\\\)(?:subpage)(?:\\s+(\\S*))?(?:\\s+(.*))?$",
                    "name": "constant.other.docs.tag.qore",
                    "captures":{
                        "1": {
                            "name": "entity.other.docs.subpage.tag.qore"
                        },
                        "2": {
                            "name": "string.other.docs.subpage.qore"
                        }
                    }
                },
                {
                    "match": "((\\@|\\\\)(brief|copy(brief|details|doc|right)|date|def|deprecated|else(if)?|endcode|example|file|if(not)?|note|relate(d|s)(also)?|remark(s)?|result|return(s)?|retval|sa|see|since|tableofcontents|todo|(end)?verbatim|version|warning))",
                    "name": "constant.other.docs.tag.qore"
                },
                {
                    "match": "((\\@|\\\\)(a|b|e|n|p))",
                    "name": "constant.other.docs.tag.qore"
                },
                {
                    "match": "((\\@|\\\\)[$@&~<>#%\".|])",
                    "name": "constant.other.docs.tag.qore"
                },
                {
                    "match": "((\\@|\\\\)\\\\)",
                    "name": "constant.other.docs.tag.qore"
                }
            ]
        },
        "escaped_chars": {
            "patterns": [
                {
                    "match": "\\\\([0-7]{3}|[0-7]{2}|[0-7]|[\"\\\\bfnrtv])",
                    "name": "constant.character.escape.qore"
                }
            ]
        },
        "format_chars": {
            "patterns": [
                {
                    "match": "(%[aAdfFgGnNsxXy])",
                    "name": "constant.character.format.qore"
                }
            ]
        },
        "implicit_args": {
            "patterns": [
                {
                    "match": "([$][1-9][0-9]*)",
                    "name": "constant.language.implicitarg.qore"
                },
                {
                    "match": "([$]{2})",
                    "name": "constant.language.implicitarglist.qore"
                },
                {
                    "match": "([$]#)",
                    "name": "constant.language.implicitindex.qore"
                }
            ]
        },
        "keywords": {
            "patterns": [
                {
                    "match": "\\b(break|case|continue|default|do|else|for(each)?|if|in|return|switch|thread_exit|while)\\b",
                    "name": "keyword.control.qore"
                },
                {
                    "match": "\\b(try|catch|throw|rethrow)\\b",
                    "name": "keyword.control.exception.qore"
                },
                {
                    "match": "\\b(on_exit|on_error|on_success)\\b",
                    "name": "keyword.control.oncondition.qore"
                },
                {
                    "match": "\\b(by|context|sortBy|sortDescendingBy|subcontext|summarize|where)\\b",
                    "name": "keyword.control.special.qore"
                },
                {
                    "match": "\\b(background|chomp|elements|exists|extract|foldl|foldr|instanceof|keys|map|pop|push|remove|select|splice|shift|trim|unshift)\\b",
                    "name": "keyword.operator.qore"
                },
                {
                    "match": "\\bnew\\b",
                    "name": "keyword.operator.new.qore"
                },
                {
                    "match": "\\bdelete\\b",
                    "name": "keyword.operator.delete.qore"
                },
                {
                    "match": "\\bcast\\b",
                    "name": "keyword.operator.cast.qore"
                }
            ]
        },
        "numbers": {
            "patterns": [
                {
                    "match": "\\b((0(x|X)[0-9a-fA-F]*)|(([0-9]+\\.?[0-9]*)|(\\.[0-9]+))((e|E)(\\+|-)?[0-9]+)?)(n)?\\b",
                    "name": "constant.numeric.qore"
                }
            ]
        },
        "operators": {
            "patterns": [
                {
                    "match": "\\?|:",
                    "name": "keyword.control.ternary.qore"
                },
                {
                    "match": "(<<|>>>?|\\^)",
                    "name": "keyword.operator.bitwise.qore"
                },
                {
                    "match": "((&|\\^|\\||<<|>>)=)",
                    "name": "keyword.operator.assignment.bitwise.qore"
                },
                {
                    "match": "(===?|!==?|<=|>=|<=>|<|>)",
                    "name": "keyword.operator.comparison.qore"
                },
                {
                    "match": "([+*/%-]=)",
                    "name": "keyword.operator.assignment.arithmetic.qore"
                },
                {
                    "match": "(=)",
                    "name": "keyword.operator.assignment.qore"
                },
                {
                    "match": "(:=)",
                    "name": "keyword.operator.assignment.weakref.qore"
                },
                {
                    "match": "(\\-\\-|\\+\\+)",
                    "name": "keyword.operator.increment-decrement.qore"
                },
                {
                    "match": "(\\-|\\+|\\*|\\/|%)",
                    "name": "keyword.operator.arithmetic.qore"
                },
                {
                    "match": "(!|&&|\\|\\|)",
                    "name": "keyword.operator.logical.qore"
                },
                {
                    "match": "(\\||&)",
                    "name": "keyword.operator.bitwise.qore"
                },
                {
                    "match": ";",
                    "name": "punctuation.terminator.qore"
                }
            ]
        },
        "parse_options": {
            "patterns": [
                {
                    "match": "^(%[a-z]+(-[a-z]+)+)(.*)$",
                    "name": "meta.parseoption.qore",
                    "captures": {
                        "1": {
                            "name": "keyword.control.parseoption.qore"
                        },
                        "3": {
                            "name": "string.unquoted.qore"
                        }
                    }
                },
                {
                    "match": "^(%[a-z]+)(.*)$",
                    "name": "meta.parseoption.qore",
                    "captures": {
                        "1": {
                            "name": "keyword.control.parseoption.qore"
                        },
                        "2": {
                            "name": "string.unquoted.qore"
                        }
                    }
                }
            ]
        },
        "regexps": {
            "patterns": [
                {
                    "comment": "Regex match",
                    "begin": "(=~)\\s*(/)",
                    "end": "(?:(?:\\\\\\\\)|(?:\\\\/)|[^\\/])*(/)([imsx]*)",
                    "beginCaptures": {
                        "1": {
                            "name": "keyword.operator.regexmatch.qore"
                        },
                        "2": {
                            "name": "keyword.operator.regexopen.qore"
                        }
                    },
                    "endCaptures": {
                        "1": {
                            "name": "keyword.operator.regexclose.qore"
                        },
                        "2": {
                            "name": "keyword.other.regex.modifier.qore"
                        }
                    },
                    "name": "string.regexp.qore"
                },
                {
                    "comment": "Regex notmatch",
                    "begin": "(!~)\\s*(/)",
                    "end": "(?:(?:\\\\\\\\)|(?:\\\\/)|[^\\/])*(/)([imsx]*)",
                    "beginCaptures": {
                        "1": {
                            "name": "keyword.operator.regexnotmatch.qore"
                        },
                        "2": {
                            "name": "keyword.operator.regexopen.qore"
                        }
                    },
                    "endCaptures": {
                        "1": {
                            "name": "keyword.operator.regexclose.qore"
                        },
                        "2": {
                            "name": "keyword.other.regex.modifier.qore"
                        }
                    },
                    "name": "string.regexp.qore"
                },
                {
                    "comment": "Regex match (extract)",
                    "begin": "(=~)\\s*(x/)",
                    "end": "(?:(?:\\\\\\\\)|(?:\\\\/)|[^\\/])*(/)([imsxg]*)",
                    "beginCaptures": {
                        "1": {
                            "name": "keyword.operator.regexmatch.qore"
                        },
                        "2": {
                            "name": "keyword.operator.regexopen.qore"
                        }
                    },
                    "endCaptures": {
                        "1": {
                            "name": "keyword.operator.regexclose.qore"
                        },
                        "2": {
                            "name": "keyword.other.regex.modifier.qore"
                        }
                    },
                    "name": "string.regexp.extraction.qore"
                },
                {
                    "comment": "Regex match (substitution)",
                    "begin": "(=~)\\s*(s/)",
                    "end": "(?:(?:\\\\\\\\)|(?:\\\\/)|[^\\/])*(/)(?:(?:\\\\\\\\)|(?:\\\\/)|[^\\/])*(/)([imsxg]*)",
                    "beginCaptures": {
                        "1": {
                            "name": "keyword.operator.regexmatch.qore"
                        },
                        "2": {
                            "name": "keyword.operator.regexopen.qore"
                        }
                    },
                    "endCaptures": {
                        "1": {
                            "name": "keyword.operator.regexmiddle.qore"
                        },
                        "2": {
                            "name": "keyword.operator.regexclose.qore"
                        },
                        "3": {
                            "name": "keyword.other.regex.modifier.qore"
                        }
                    },
                    "name": "string.regexp.substitution.qore"
                },
                {
                    "comment": "Regex match (transliteration)",
                    "begin": "(=~)\\s*(tr/)",
                    "end": "(?:(?:\\\\\\\\)|(?:\\\\/)|[^\\/])*(/)(?:(?:\\\\\\\\)|(?:\\\\/)|[^\\/])*(/)([imsxg]*)",
                    "beginCaptures": {
                        "1": {
                            "name": "keyword.operator.regexmatch.qore"
                        },
                        "2": {
                            "name": "keyword.operator.regexopen.qore"
                        }
                    },
                    "endCaptures": {
                        "1": {
                            "name": "keyword.operator.regexmiddle.qore"
                        },
                        "2": {
                            "name": "keyword.operator.regexclose.qore"
                        },
                        "3": {
                            "name": "keyword.other.regex.modifier.qore"
                        }
                    },
                    "name": "string.regexp.transliteration.qore"
                }
            ]
        },
        "storage_modifiers": {
            "patterns": [
                {
                    "match": "\\b(deprecated|final|public)\\b",
                    "name": "storage.modifier.class.qore"
                },
                {
                    "match": "\\b(private:hierarchy|private:internal)\\b",
                    "name": "storage.modifier.private.special.qore"
                },
                {
                    "match": "\\b(abstract|deprecated|final|public|private|static|synchronized)\\b",
                    "name": "storage.modifier.function.qore"
                },
                {
                    "match": "\\b(deprecated|final|my|our|public|private|static)\\b",
                    "name": "storage.modifier.variable.qore"
                }
            ]
        },
        "storage_types": {
            "patterns": [
                {
                    "match": "\\bclass\\b",
                    "name": "storage.type.class.qore"
                },
                {
                    "match": "\\bconst\\b",
                    "name": "storage.type.const.qore"
                },
                {
                    "match": "\\bhashdecl\\b",
                    "name": "storage.type.hashdecl.qore"
                },
                {
                    "match": "\\bmodule\\b",
                    "name": "storage.type.module.qore"
                },
                {
                    "match": "\\bnamespace\\b",
                    "name": "storage.type.namespace.qore"
                },
                {
                    "match": "\\bsub\\b",
                    "name": "storage.type.subroutine.qore"
                },
                {
                    "match": "\\b(inherits|returns)\\b",
                    "name": "storage.type.special.qore"
                },
                {
                    "match": "\\b(binary|bool|date|float|hash|int|list|number|string)\\b",
                    "name": "storage.type.primitive.qore"
                },
                {
                    "match": "\\b(softbool|softdate|softfloat|softhash|softint|softlist|softnumber|softstring)\\b",
                    "name": "storage.type.primitive.soft.qore"
                },
                {
                    "match": "\\bany\\b",
                    "name": "storage.type.any.qore"
                },
                {
                    "match": "\\b(callref|closure|code)\\b",
                    "name": "storage.type.code.qore"
                },
                {
                    "match": "\\bdata\\b",
                    "name": "storage.type.data.qore"
                },
                {
                    "match": "\\bnothing\\b",
                    "name": "storage.type.nothing.qore"
                },
                {
                    "match": "\\bnull\\b",
                    "name": "storage.type.null.qore"
                },
                {
                    "match": "\\bobject\\b",
                    "name": "storage.type.object.qore"
                },
                {
                    "match": "\\breference\\b",
                    "name": "storage.type.reference.qore"
                },
                {
                    "match": "\\btimeout\\b",
                    "name": "storage.type.timeout.qore"
                }
            ]
        },
        "strings": {
            "name": "string.quoted.double.qore",
            "begin": "\"",
            "end": "\"",
            "patterns": [
                {
                    "include": "#escaped_chars"
                },
                {
                    "include": "#format_chars"
                },
                {
                    "match": "(&amp;|&lt;|&gt;)",
                    "name": "constant.character.special.qore"
                }
            ]
        },
        "strings2": {
            "name": "string.quoted.single.qore",
            "begin": "'",
            "end": "'",
            "patterns": [
                {
                    "include": "#format_chars"
                },
                {
                    "match": "(&amp;|&lt;|&gt;)",
                    "name": "constant.character.special.qore"
                }
            ]
        }
    },
    "scopeName": "source.qore"
}